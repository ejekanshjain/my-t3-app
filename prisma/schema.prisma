generator client {
    provider = "prisma-client-js"
    // Uncomment the line below if you want to use experimental json protocol for prisma instead of graphql bindings
    // previewFeatures = ["jsonProtocol"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now()) @db.Timestamptz()
    updatedAt DateTime @default(now()) @updatedAt @db.Timestamptz()

    @@map("Examples")
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@map("Accounts")
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime @db.Timestamptz()

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("Sessions")
}

// uncomment this if you want to use role based auth
// enum Role {
//     ADMIN
//     USER
// }

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime? @db.Timestamptz()
    image         String?
    // uncomment this if you want to use role based auth
    // password      String?
    // uncomment this if you want to use credentials login
    // role          Role      @default(USER)

    accounts Account[]
    sessions Session[]

    @@map("Users")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
    @@map("VerificationTokens")
}
